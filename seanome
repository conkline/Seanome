#!/bin/bash
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='iotpmflkrhqbdan'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

#global variables
_arg_in=""
_arg_out=""
_arg_mixed="off"
_arg_paired="off"
_arg_threads=$(nproc)
_arg_minlength=80
_arg_maxdiffs=10

#indexReads variables
_arg_c1="GATC"
_arg_c2="off"
_arg_n_index_files="4"
_arg_hash_length="6"
_arg_keep_strand="off"
_arg_rescue="off"

#clusterSamples variables
_arg_quality=20
_arg_percentbases=75
_arg_clusterOne=.95
_arg_nonambiguous=70

#clusterAll variables
_arg_clusterTwo=.95
_arg_mindp=3
_arg_maxdp=""
_arg_minper=3 
_arg_mincc=.95
_arg_mincount=2
_arg_mindepth=6
_arg_minsamples=1
_arg_maxmm=.15
_arg_ploidy=2

# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "seanome v 1.0.0"
	printf 'Usage: %s [-i|--in <arg>] [-o|--out <arg>] [-t|--threads <arg>] [-m|--mixed <arg>] [-p|--(no-)paired] [--e1 <arg>] [--e2 <arg>] [-f|--n_index_files <arg>] [-l|--hash_length <arg>] [-k|--keep_strand] [-r|--rescue] [-h|--help] [-q|--quality <arg>] [-b|--percentbases <arg>] [--c1 <arg>] [-a|--alignlength <arg>] [-d|--maxdiffs <arg>] [-n|--nonambiguous <arg>] [--c2 <arg>] [--ploidy <arg>] [--min-depth <arg>] [--max-depth <arg>] [--min-per-sample <arg>] [--min-cc <arg>] [--max-mm <arg>] [--min-count <arg>] [--min-cov <arg>] [--min-samples <arg>]\n' "$0"
	printf '\t%s\n' "-i, --in: name of input directory containing raw reads (no default)"
	printf '\t%s\n' "-o, --out: name of directory containing folders with indexed reads (no default)"
	printf '\t%s\n' "-t, --threads: number of threads to run in parellel (default: # available)"
	printf '\t%s\n\n' "-h, --help: Prints help"
	
	printf '\t%s\n' "Read indexing parameters"
	printf '\t%s\n' "-m, --mixed: optional .csv specifying enzymes and paired-end status per sample (off by default)"
	printf '\t%s\n' "-p, --paired: samples have both forward and reverse read files (off by default)"
	printf '\t%s\n' "--e1: sequence expected at cutsite, from first (or only) enzyme (default: 'GATC')"
	printf '\t%s\n' "--e2: sequence expected at cutsite, from second enzyme (no default)"
	printf '\t%s\n' "-f, --n_index_files: number of indexed output files per sample (default: '4')"
	printf '\t%s\n' "-l, --hash_length: length of hash index, in number of nucleotides (default: '6')"
	printf '\t%s\n' "-k, --keep_strand, --no-keep_strand: keep reads even if one direction is dropped due to cutsite (off by default)"
	printf '\t%s\n' "-r, --rescue, --no-rescue: rescue reads if cutsite if off by only one base nucleotide (off by default)"
	
	printf '\t%s\n' "Assembly building parameters"
	printf '\t%s\n' "-q, --quality: minimum fastq quality score (default: '20')"
	printf '\t%s\n' "-b, --percentbases: minimum percent of bases with [q] quality score (default: '75')"
	printf '\t%s\n' "--c1: within-sample clustering threshold (default: '0.95')"
	printf '\t%s\n' "-n, --nonambiguous: minimum non-ambiguous bases in alignment (default: '70')"
	printf '\t%s\n' "--c2: between-sample clustering threshold (default: '0.95')"
	printf '\t%s\n' "-a, --alignlength: minimum alignment length (default: '80')"
	printf '\t%s\n' "-d, --maxdiffs: maximum substitutions, insertions, or deletions in alignment (default: '10')"
	printf '\t%s\n\n' "--ploidy: organism ploidy (expected # haplotypes per individual) (default: '2')"
	
	printf '\t%s\n' "Assembly filtering parameters"
	printf '\t%s\n' "--min-depth: minimum number of reads per locus (default: '3')"
	printf '\t%s\n' "--max-depth: maximum number of reads per locus (default: if no hard cutoff specified, Seanome will determine one using head-tail clustering)"
	printf '\t%s\n' "--min-per-sample: minimum number of reads per locus, per sample (default: '3')"
	printf '\t%s\n' "--min-cc: minimum average % column conservation (default: '0.95')"
	printf '\t%s\n\n' "--max-mm: maximum % mismatch (default: '0.15')"
	
	printf '\t%s\n' "SNP calling parameters"
	printf '\t%s\n' "--min-count: minimum minor allele count (default: '2')"
	printf '\t%s\n' "--min-cov: minimum coverage (default: '6')"
	printf '\t%s\n' "--min-samples: minimum samples per SNP (default: '1')"
	
}

# The parsing of the command-line
parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --in or -i value.
			# so we watch for --in and -i.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-i|--in)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_in="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --in=value, so we watch for --in=*
			# For whatever we get, we strip '--in=' using the ${var##--in=} notation
			# to get the argument value
			--in=*)
				_arg_in="${_key##--in=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -i accepts value, we allow it to be appended to it, so we watch for -i*
			# and we strip the leading -i from the argument string using the ${var##-i} notation.
			-i*)
				_arg_in="${_key##-i}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-o|--out)
				test $# -lt 2 && die "Missing value for the argument '$_key'." 1
				_arg_out="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--out=*)
				_arg_out="${_key##--out=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-o*)
				_arg_out="${_key##-o}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-t|--threads)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_threads="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--threads=*)
				_arg_threads="${_key##--threads=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-t*)
				_arg_threads="${_key##-t}"
				;;
				# See the comment of option '--in' to see what's going on here - principle is the same.
			-m|--mixed)
				test $# -lt 2 && die "Missing value for the argument '$_key'." 1
				_arg_mixed="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--mixed=*)
				_arg_mixed="${_key##--mixed=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-m*)
				_arg_mixed="${_key##-m}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			--e1)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_c1="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--e1=*)
				_arg_c1="${_key##--e1=}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			--e2)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_c2="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--e2=*)
				_arg_c2="${_key##--e2=}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-f|--n_index_files)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_n_index_files="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--n_index_files=*)
				_arg_n_index_files="${_key##--n_index_files=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-f*)
				_arg_n_index_files="${_key##-f}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-l|--hash_length)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hash_length="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--hash_length=*)
				_arg_hash_length="${_key##--hash_length=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-l*)
				_arg_hash_length="${_key##-l}"
				;;
			# The keep_strand argurment doesn't accept a value,
			# we expect the --keep_strand or -k, so we watch for them.
			-k|--no-keep_strand|--keep_strand)
				_arg_keep_strand="on"
				test "${1:0:5}" = "--no-" && _arg_keep_strand="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -k doesn't accept value, other short options may be appended to it, so we watch for -k*.
			# After stripping the leading -k from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-k*)
				_arg_keep_strand="on"
				_next="${_key##-k}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-k" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--keep_strand' to see what's going on here - principle is the same.
			-r|--no-rescue|--rescue)
				_arg_rescue="on"
				test "${1:0:5}" = "--no-" && _arg_rescue="off"
				;;
			# See the comment of option '-k' to see what's going on here - principle is the same.
			-r*)
				_arg_rescue="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
				# See the comment of option '--keep_strand' to see what's going on here - principle is the same.
			-p|--no-paired|--paired)
				_arg_paired="on"
				test "${1:0:5}" = "--no-" && _arg_paired="off"
				;;
			# See the comment of option '-k' to see what's going on here - principle is the same.
			-p*)
				_arg_paired="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-q|--quality)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_quality="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--quality=*)
				_arg_quality="${_key##--quality=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-q*)
				_arg_quality="${_key##-q}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-b|--percentbases)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_percentbases="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--percentbases=*)
				_arg_percentbases="${_key##--percentbases=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-b*)
				_arg_percentbases="${_key##-b}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			--c1|--clusterid1)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clusterid="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--clusterid1=*)
				_arg_clusterid="${_key##--clusterid1=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			--c1*)
				_arg_clusterid="${_key##--c1}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-n|--nonambiguous)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_nonambiguous="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--nonambiguous=*)
				_arg_nonambiguous="${_key##--nonambiguous=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-n*)
				_arg_nonambiguous="${_key##-n}"
				;;				
			# See the comment of option '--in' to see what's going on here - principle is the same.
			--min-depth)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1 
				_arg_mindp="$2"
				shift
				;;																			                        
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-depth=*)
				_arg_mindp="${_key##--min-depth=}"
				;;
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--max-depth)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_maxdp="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--max-depth=*)
				_arg_maxdp="${_key##--max-depth=}"
				;;
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--min-per-sample)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_minper="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-per-sample=*)
				_arg_minper="${_key##--min-per-sample=}"
				;;				
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--min-cc)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_mincc="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-cc=*)
				_arg_mincc="${_key##--min-cc=}"
				;;					
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--max-mm)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_maxmm="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--max-mm=*)
				_arg_maxmm="${_key##--max-mm=}"
				;;				
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--ploidy)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_ploidy="$2"
	       shift
	       ;;                                                                                                                      
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--ploidy=*)
				_arg_ploidy="${_key##--ploidy=}"
				;;					
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--min-count)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_mincount="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-count=*)
				_arg_mincount="${_key##--min-count=}"
				;;				
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--min-cov)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_mindepth="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-cov=*)
				_arg_mindepth="${_key##--min-cov=}"
				;;				
      # See the comment of option '--in' to see what's going on here - principle is the same.
			--min-samples)
				 test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				 _arg_minsamples="$2"
	       shift
	       ;;                                                                                                                       
	    # See the comment of option '--in=' to see what's going on here - principle is the same.
			--min-samples=*)
				_arg_minsamples="${_key##--min-samples=}"
				;;				
  		# See the comment of option '--in' to see what's going on here - principle is the same.
			--c2|--clusterid2)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clusterid="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--clusterid2=*)
				_arg_clusterid="${_key##--clusterid2=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			--c2*)
				_arg_clusterid="${_key##--c2}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-a|--alignlength)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_minlength="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--alignlength=*)
				_arg_minlength="${_key##--alignlength=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-a*)
				_arg_minlength="${_key##-a}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-d|--maxdiffs)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_maxdiffs="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--maxdiffs=*)
				_arg_maxdiffs="${_key##--maxdiffs=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-d*)
				_arg_maxdiffs="${_key##-d}"
				;;
			# See the comment of option '--paired' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-p' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}


# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash

if [ -z "$_arg_in" ]
then
	_PRINT_HELP=yes die "ERROR: Missing expected parameters: input directory"
fi

./indexReads -i ${_arg_in} -o ${_arg_out} -t ${_arg_threads} -m ${_arg_mixed} -p ${_arg_paired} --e1 ${_arg_c1} --e2 ${_arg_c2} -f ${_arg_n_index_files} -l ${_arg_hash_length} -k ${_arg_keep_strand} -r ${_arg_rescue}

./clusterSamples -i ${_arg_in} -o ${_arg_out} -t ${_arg_threads} -m ${_arg_mixed} -p ${_arg_paired} -q ${_arg_quality} -b ${_arg_percentbases} --c1 ${_arg_clusterOne} -a ${_arg_minlength} -d ${_arg_maxdiffs} -n ${_arg_nonambiguous}

./clusterAll -i ${_arg_in} -o ${_arg_out} -t ${_arg_threads} --c2 ${_arg_clusterTwo} -a ${_arg_minlength} -d ${_arg_maxdiffs} --ploidy ${_arg_ploidy} --min-depth ${_arg_mindp} --max-depth ${_arg_maxdp} --min-per-sample $_arg_minper --min-cc ${_arg_mincc} --max-mm ${_arg_maxmm} --min-count ${_arg_mincount} --min-cov ${_arg_mindepth} --min-samples ${_arg_minsamples}
