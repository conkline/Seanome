#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([in],[i],[name of input directory containing raw reads])
# ARG_OPTIONAL_SINGLE([out],[o],[name of directory containing indexed reads])
# ARG_OPTIONAL_BOOLEAN([paired],[p],[all reads have forward and reverse files])
# ARG_OPTIONAL_SINGLE([mixed],[m],[.csv detailing paired-end status and enzyme(s) per sample])
# ARG_OPTIONAL_SINGLE([threads],[t],[number of threads to run in parellel (default: # available)])
# ARG_OPTIONAL_SINGLE([quality],[q],[minimum fastq quality score],[20])
# ARG_OPTIONAL_SINGLE([percentbases],[b],[minimum percent of bases with [q] quality score],[75])
# ARG_OPTIONAL_SINGLE([clusterid],[c],[global clustering threshold],[95])
# ARG_OPTIONAL_SINGLE([minlength],[l],[minimum alignment length],[80])
# ARG_OPTIONAL_SINGLE([maxdiffs],[d],[maximum substitutions, insertions, or deletions in alignment],[10])
# ARG_OPTIONAL_SINGLE([nonambiguous],[n],[minimum non-ambiguous bases in alignment],[70])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='ipmtqbcldnh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_in=""
_arg_out=""
_arg_paired="off"
_arg_mixed="off"
_arg_threads=$(nproc)
_arg_quality=20
_arg_percentbases=75
_arg_clusterid=.95
_arg_minlength=80
_arg_maxdiffs=10
_arg_nonambiguous=70

# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-i|--in <arg>] [-o|--out <arg>] [-p|--paired] [-m|--mixed <arg>] [-t|--threads <arg>] [-q|--quality <arg>] [-b|--percentbases <arg>] [--c1 <arg>] [-a|--alignlength <arg>] [-d|--maxdiffs <arg>] [-n|--nonambiguous <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-i, --in: name of input directory containing raw reads (no default)"
	printf '\t%s\n' "-o, --out: name of directory containing folders with indexed reads (no default)"
	printf '\t%s\n' "-p, --paired, --no-paired: all reads have forward and reverse files (off by default)"
	printf '\t%s\n' "-m, --mixed: .csv detailing paired-end status and enzyme(s) per sample (no default)"
	printf '\t%s\n' "-t, --threads: number of threads to run in parellel (default: # available)"
	printf '\t%s\n' "-q, --quality: minimum fastq quality score (default: '20')"
	printf '\t%s\n' "-b, --percentbases: minimum percent of bases with [q] quality score (default: '75')"
	printf '\t%s\n' "--c1: within-sample clustering threshold (default: '0.95')"
	printf '\t%s\n' "-a, --alignlength: minimum alignment length (default: '80')"
	printf '\t%s\n' "-d, --maxdiffs: maximum substitutions, insertions, or deletions in alignment (default: '10')"
	printf '\t%s\n' "-n, --nonambiguous: minimum non-ambiguous bases in alignment (default: '70')"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --in or -i value.
			# so we watch for --in and -i.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-i|--in)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_in="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --in=value, so we watch for --in=*
			# For whatever we get, we strip '--in=' using the ${var##--in=} notation
			# to get the argument value
			--in=*)
				_arg_in="${_key##--in=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -i accepts value, we allow it to be appended to it, so we watch for -i*
			# and we strip the leading -i from the argument string using the ${var##-i} notation.
			-i*)
				_arg_in="${_key##-i}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-o|--out)
				test $# -lt 2 && die "Missing value for the argument '$_key'." 1
				_arg_out="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--out=*)
				_arg_out="${_key##--out=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-o*)
				_arg_out="${_key##-o}"
				;;
			# The paired argurment doesn't accept a value,
			# we expect the --paired or -p, so we watch for them.
			-p|--no-paired|--paired)
				_arg_paired="on"
				test "${1:0:5}" = "--no-" && _arg_paired="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -p doesn't accept value, other short options may be appended to it, so we watch for -p*.
			# After stripping the leading -p from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-p*)
				_arg_paired="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-m|--mixed)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mixed="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--mixed=*)
				_arg_mixed="${_key##--mixed=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-m*)
				_arg_mixed="${_key##-m}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-t|--threads)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_threads="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--threads=*)
				_arg_threads="${_key##--threads=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-t*)
				_arg_threads="${_key##-t}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-q|--quality)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_quality="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--quality=*)
				_arg_quality="${_key##--quality=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-q*)
				_arg_quality="${_key##-q}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-b|--percentbases)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_percentbases="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--percentbases=*)
				_arg_percentbases="${_key##--percentbases=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-b*)
				_arg_percentbases="${_key##-b}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			--c1|--clusterid1)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clusterid="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--clusterid1=*)
				_arg_clusterid="${_key##--clusterid1=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			--c1*)
				_arg_clusterid="${_key##--c1}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-a|--alignlength)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_minlength="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--alignlength=*)
				_arg_minlength="${_key##--alignlength=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-a*)
				_arg_minlength="${_key##-a}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-d|--maxdiffs)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_maxdiffs="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--maxdiffs=*)
				_arg_maxdiffs="${_key##--maxdiffs=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-d*)
				_arg_maxdiffs="${_key##-d}"
				;;
			# See the comment of option '--in' to see what's going on here - principle is the same.
			-n|--nonambiguous)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_nonambiguous="$2"
				shift
				;;
			# See the comment of option '--in=' to see what's going on here - principle is the same.
			--nonambiguous=*)
				_arg_nonambiguous="${_key##--nonambiguous=}"
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-n*)
				_arg_nonambiguous="${_key##-n}"
				;;
			# See the comment of option '--paired' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-p' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash

#(script stuff)
#make sure to fix the A1 to A3 thing with grep - some kind of check (look into seqtk seq -S)
#make sure to make big fasta file here too

if [ -z "$_arg_in" ]
then
	_PRINT_HELP=yes die "ERROR: Missing expected parameters: input directory"
fi

logfile=./$_arg_out/"seanome_clusterSamples_$(date +%m_%d_%Y_%H-%M-%S).log"
echo "$0 $@" > $logfile
echo "Running 'clusterSamples' using "$_arg_threads" threads." >> $logfile
echo "" >> $logfile

#get sample names from directory
popnames=$(ls "./$_arg_in" | grep -v ".log" | sed "s|$_arg_in/||" | sed "s|/:||" | sed "s|.F.fastq||" | sed "s|.R.fastq||" | sort | uniq) 

#remove trailing slashes if present
_arg_in=$(echo "$_arg_in" | sed "s|/$||")
_arg_out=$(echo "$_arg_out" | sed "s|/$||")

while read -r line; do

    #figure out parallelization
    #_arg_threads is max user wants (nproc by default)
    
    #run clustering script
    partialIndexList=$(find "./$_arg_out/$line/" -name "partial_F_[0-9]*.ids")
    
    parallel --will-cite -j $_arg_threads bash ./scripts/processSample.sh $_arg_in $_arg_out $line {} $_arg_paired $_arg_mixed $_arg_threads $_arg_quality $_arg_percentbases $_arg_clusterid $_arg_minlength $_arg_maxdiffs $_arg_nonambiguous <<< "$partialIndexList" >> $logfile
    
    #handle output files
    mkdir ./$_arg_out/$line"/tmpfiles_"$line
    cat ./$_arg_out/$line/*contigs > ./$_arg_out/$line/$line".contigs.out"
    cat ./$_arg_out/$line/*mapping_to_cons > ./$_arg_out/$line/$line".mapping.out"
    cat ./$_arg_out/$line/*fasta > ./$_arg_out/$line/$line".fasta"
    cat ./$_arg_out/$line/partial_F_[0-9].fastq > ./$_arg_out/$line/$line".fastq"
    find ./$_arg_out/$line -type f ! -name "$line*" -exec mv {} ./$_arg_out/$line"/tmpfiles_"$line \; 2> /dev/null

done <<< "$popnames"
